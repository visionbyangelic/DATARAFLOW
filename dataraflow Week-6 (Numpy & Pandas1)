{"metadata":{"kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13470670,"sourceType":"datasetVersion","datasetId":8551235}],"dockerImageVersionId":31153,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/nerdyalgorithm/dataraflow-week-6-numpy-pandas1?scriptVersionId=270085751\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"![](https://cdn.hashnode.com/res/hashnode/image/upload/v1761178901844/5c98d59d-3947-4b97-bfd2-84c33acd7664.png?w=1600&h=840&fit=crop&crop=entropy&auto=compress,format&format=webp)","metadata":{}},{"cell_type":"markdown","source":"## Task","metadata":{}},{"cell_type":"code","source":"#imports\nimport numpy as np\nimport pandas as pd","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.779004Z","iopub.execute_input":"2025-10-22T23:19:49.779333Z","iopub.status.idle":"2025-10-22T23:19:49.78429Z","shell.execute_reply.started":"2025-10-22T23:19:49.779312Z","shell.execute_reply":"2025-10-22T23:19:49.78329Z"}},"outputs":[],"execution_count":49},{"cell_type":"markdown","source":"---\n1. Write a NumPy program to test element-wise for NaN of a given array.\n   ","metadata":{}},{"cell_type":"code","source":"# Create an array with a NaN value\na = np.array([1, 0, np.nan, 5])\nprint(\"Original array:\")\nprint(a)\n\n# Test for NaN element-wise\nprint(\"\\nTesting for NaN:\")\nprint(np.isnan(a))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.785875Z","iopub.execute_input":"2025-10-22T23:19:49.786226Z","iopub.status.idle":"2025-10-22T23:19:49.804898Z","shell.execute_reply.started":"2025-10-22T23:19:49.786192Z","shell.execute_reply":"2025-10-22T23:19:49.803969Z"}},"outputs":[{"name":"stdout","text":"Original array:\n[ 1.  0. nan  5.]\n\nTesting for NaN:\n[False False  True False]\n","output_type":"stream"}],"execution_count":50},{"cell_type":"markdown","source":"---\n2. Write a NumPy program to test element-wise for complex number, real number of a given array. Also test whether a given number is a scalar type or not.","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Create an array with different data types\na = np.array([1 + 1j, 1 + 0j, 5.2, 7])\nprint(\"Original array:\")\nprint(a)\n\n# Test for complex numbers\nprint(\"\\nIs the number complex?\")\nprint(np.iscomplex(a))\n\n# Test for real numbers\nprint(\"\\nIs the number real?\")\nprint(np.isreal(a))\n\n# Test if a number is a scalar type\nprint(\"\\nIs 3.1 a scalar?\")\nprint(np.isscalar(3.1))\n\nprint(\"\\nIs [3.1] a scalar?\")\nprint(np.isscalar([3.1]))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.805857Z","iopub.execute_input":"2025-10-22T23:19:49.806565Z","iopub.status.idle":"2025-10-22T23:19:49.825669Z","shell.execute_reply.started":"2025-10-22T23:19:49.806532Z","shell.execute_reply":"2025-10-22T23:19:49.824692Z"}},"outputs":[{"name":"stdout","text":"Original array:\n[1. +1.j 1. +0.j 5.2+0.j 7. +0.j]\n\nIs the number complex?\n[ True False False False]\n\nIs the number real?\n[False  True  True  True]\n\nIs 3.1 a scalar?\nTrue\n\nIs [3.1] a scalar?\nFalse\n","output_type":"stream"}],"execution_count":51},{"cell_type":"markdown","source":"---\n3. Write a NumPy program to test whether two arrays are element-wise equal within a tolerance.","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\n# Create two arrays that are close but not exactly equal\na1 = np.array([0.1, 0.2, 0.3])\na2 = np.array([0.100001, 0.200002, 0.300003])\na3 = np.array([0.1, 0.3, 0.4])\n\nprint(\"Array 1:\", a1)\nprint(\"Array 2:\", a2)\nprint(\"Array 3:\", a3)\n\n# Test if a1 and a2 are equal within a tolerance\nprint(\"\\nAre a1 and a2 close?\", np.allclose(a1, a2))\n\n# Test if a1 and a3 are equal within a tolerance\nprint(\"Are a1 and a3 close?\", np.allclose(a1, a3))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.827823Z","iopub.execute_input":"2025-10-22T23:19:49.828168Z","iopub.status.idle":"2025-10-22T23:19:49.847332Z","shell.execute_reply.started":"2025-10-22T23:19:49.828141Z","shell.execute_reply":"2025-10-22T23:19:49.846121Z"}},"outputs":[{"name":"stdout","text":"Array 1: [0.1 0.2 0.3]\nArray 2: [0.100001 0.200002 0.300003]\nArray 3: [0.1 0.3 0.4]\n\nAre a1 and a2 close? True\nAre a1 and a3 close? False\n","output_type":"stream"}],"execution_count":52},{"cell_type":"markdown","source":"---\n4. Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given arrays.","metadata":{}},{"cell_type":"code","source":"a = np.array([1, 8, 3, 5])\nb = np.array([6, 2, 9, 5])\nprint(\"Array a:\", a)\nprint(\"Array b:\", b)\n\n# Perform comparisons\nprint(\"\\na > b\")\nprint(np.greater(a, b))\n\nprint(\"\\na >= b\")\nprint(np.greater_equal(a, b))\n\nprint(\"\\na < b\")\nprint(np.less(a, b))\n\nprint(\"\\na <= b\")\nprint(np.less_equal(a, b))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.848395Z","iopub.execute_input":"2025-10-22T23:19:49.849089Z","iopub.status.idle":"2025-10-22T23:19:49.868764Z","shell.execute_reply.started":"2025-10-22T23:19:49.849053Z","shell.execute_reply":"2025-10-22T23:19:49.86732Z"}},"outputs":[{"name":"stdout","text":"Array a: [1 8 3 5]\nArray b: [6 2 9 5]\n\na > b\n[False  True False False]\n\na >= b\n[False  True False  True]\n\na < b\n[ True False  True False]\n\na <= b\n[ True False  True  True]\n","output_type":"stream"}],"execution_count":53},{"cell_type":"markdown","source":"---\n5. Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays.","metadata":{}},{"cell_type":"code","source":"import numpy as np\n\na = np.array([1, 2, 3, 4.000001])\nb = np.array([1, 5, 3, 4.0])\nprint(\"Array a:\", a)\nprint(\"Array b:\", b)\n\n# Check for exact equality\nprint(\"\\nAre arrays equal? (element-wise)\")\nprint(np.equal(a, b))\n\n# Check for equality within a tolerance\nprint(\"\\nAre arrays equal within a tolerance?\")\nprint(np.allclose(a, b))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.870059Z","iopub.execute_input":"2025-10-22T23:19:49.87102Z","iopub.status.idle":"2025-10-22T23:19:49.893393Z","shell.execute_reply.started":"2025-10-22T23:19:49.870987Z","shell.execute_reply":"2025-10-22T23:19:49.892479Z"}},"outputs":[{"name":"stdout","text":"Array a: [1.       2.       3.       4.000001]\nArray b: [1. 5. 3. 4.]\n\nAre arrays equal? (element-wise)\n[ True False  True False]\n\nAre arrays equal within a tolerance?\nFalse\n","output_type":"stream"}],"execution_count":54},{"cell_type":"markdown","source":"---\n6. Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied by the array.  ","metadata":{}},{"cell_type":"code","source":"#create an array \n\narr = np.array([1, 7, 13, 105])\nprint(f\"Array: {arr}\")\n\n#memory size \nprint(f\"Total Memory (nbytes): {arr.nbytes}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.89586Z","iopub.execute_input":"2025-10-22T23:19:49.896138Z","iopub.status.idle":"2025-10-22T23:19:49.911697Z","shell.execute_reply.started":"2025-10-22T23:19:49.89611Z","shell.execute_reply":"2025-10-22T23:19:49.910343Z"}},"outputs":[{"name":"stdout","text":"Array: [  1   7  13 105]\nTotal Memory (nbytes): 32\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"---\n7. In the code cell below, write the code to get and display the 55th row in the dataframe df.","metadata":{}},{"cell_type":"markdown","source":"**ANSWER**:      ``` df.iloc[54] ```","metadata":{}},{"cell_type":"markdown","source":"---\n8. In the code cell below write the code to display the first 10 rows of the dataframe df.","metadata":{}},{"cell_type":"markdown","source":"**ANSWER**:      ``` df.head(10) ```","metadata":{}},{"cell_type":"markdown","source":"---\n9. In the code cell below, select and display the first eight rows from the 'Country' and 'TB deaths' columns.","metadata":{}},{"cell_type":"markdown","source":"**ANSWER:**\n\n```\n# Select rows 0 through 7 from the 'Country' and 'TB deaths' columns\ndf.loc[0:7, ['Country', 'TB deaths']]\n```","metadata":{}},{"cell_type":"markdown","source":"---\n10. In the code cell below write code to find all the rows in df where TB deaths exceed 10000.","metadata":{}},{"cell_type":"markdown","source":"**ANSWER:**\n```\n# Find all rows where 'TB deaths' is greater than 10000\ndf[df['TB deaths'] > 10000]\n```","metadata":{}},{"cell_type":"markdown","source":"---\n11. In the code cell below find all the countries where the Population (1000s) is less than or equal to 50000 or TB deaths are greater than or equal to 20000.","metadata":{}},{"cell_type":"markdown","source":"**ANSWER:**\n\n```\n# Find rows that meet either condition\ndf[(df['Population (1000s)'] <= 50000) | (df['TB deaths'] >= 20000)]\n\n```","metadata":{}},{"cell_type":"markdown","source":"---\n``` END OF TASK```\n\n---","metadata":{}},{"cell_type":"markdown","source":"## Assignment","metadata":{}},{"cell_type":"markdown","source":"---\n1. \nWrite a Python program to create and display a one-dimensional array-like object containing an array of data using Pandas module.","metadata":{}},{"cell_type":"code","source":"# Create a one-dimensional array-like object (a Series)\ndata = [10, 20, 30, 40, 50]\ns = pd.Series(data)\nprint(s)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.912655Z","iopub.execute_input":"2025-10-22T23:19:49.912933Z","iopub.status.idle":"2025-10-22T23:19:49.930236Z","shell.execute_reply.started":"2025-10-22T23:19:49.9129Z","shell.execute_reply":"2025-10-22T23:19:49.929194Z"}},"outputs":[{"name":"stdout","text":"0    10\n1    20\n2    30\n3    40\n4    50\ndtype: int64\n","output_type":"stream"}],"execution_count":56},{"cell_type":"markdown","source":"---\n2. Write a Python program to convert a Panda module Series to Python list and it's type.","metadata":{}},{"cell_type":"code","source":"s = pd.Series([1, 2, 'Python', 3.14])\n\n# Convert Series to Python list\npy_list = s.tolist()\n\nprint(\"Pandas Series:\")\nprint(s)\nprint(\"\\nConverted Python list:\")\nprint(py_list)\nprint(\"\\nType of converted object:\")\nprint(type(py_list))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.931222Z","iopub.execute_input":"2025-10-22T23:19:49.931526Z","iopub.status.idle":"2025-10-22T23:19:49.951357Z","shell.execute_reply.started":"2025-10-22T23:19:49.931501Z","shell.execute_reply":"2025-10-22T23:19:49.950155Z"}},"outputs":[{"name":"stdout","text":"Pandas Series:\n0         1\n1         2\n2    Python\n3      3.14\ndtype: object\n\nConverted Python list:\n[1, 2, 'Python', 3.14]\n\nType of converted object:\n<class 'list'>\n","output_type":"stream"}],"execution_count":57},{"cell_type":"markdown","source":"---\n3. Write a Python program to add, subtract, multiple and divide two Pandas Series. Sample Series: [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]","metadata":{}},{"cell_type":"code","source":"\ns1 = pd.Series([2, 4, 6, 8, 10])\ns2 = pd.Series([1, 3, 5, 7, 9])\n\nprint(\"Series 1:\")\nprint(s1)\nprint(\"\\nSeries 2:\")\nprint(s2)\n\nprint(\"\\nAdd:\")\nprint(s1 + s2)\n\nprint(\"\\nSubtract:\")\nprint(s1 - s2)\n\nprint(\"\\nMultiply:\")\nprint(s1 * s2)\n\nprint(\"\\nDivide:\")\nprint(s1 / s2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.952586Z","iopub.execute_input":"2025-10-22T23:19:49.952862Z","iopub.status.idle":"2025-10-22T23:19:49.976244Z","shell.execute_reply.started":"2025-10-22T23:19:49.95284Z","shell.execute_reply":"2025-10-22T23:19:49.975117Z"}},"outputs":[{"name":"stdout","text":"Series 1:\n0     2\n1     4\n2     6\n3     8\n4    10\ndtype: int64\n\nSeries 2:\n0    1\n1    3\n2    5\n3    7\n4    9\ndtype: int64\n\nAdd:\n0     3\n1     7\n2    11\n3    15\n4    19\ndtype: int64\n\nSubtract:\n0    1\n1    1\n2    1\n3    1\n4    1\ndtype: int64\n\nMultiply:\n0     2\n1    12\n2    30\n3    56\n4    90\ndtype: int64\n\nDivide:\n0    2.000000\n1    1.333333\n2    1.200000\n3    1.142857\n4    1.111111\ndtype: float64\n","output_type":"stream"}],"execution_count":58},{"cell_type":"markdown","source":"---\n4. Write a Python program to get the largest integer smaller or equal to the division of the inputs. Sample Series: [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]\n\n","metadata":{}},{"cell_type":"code","source":"s1 = pd.Series([2, 4, 6, 8, 10])\ns2 = pd.Series([1, 3, 5, 7, 9])\n\nprint(\"Floor division result:\")\nprint(s1 // s2)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.977024Z","iopub.execute_input":"2025-10-22T23:19:49.9773Z","iopub.status.idle":"2025-10-22T23:19:49.996837Z","shell.execute_reply.started":"2025-10-22T23:19:49.977279Z","shell.execute_reply":"2025-10-22T23:19:49.995807Z"}},"outputs":[{"name":"stdout","text":"Floor division result:\n0    2\n1    1\n2    1\n3    1\n4    1\ndtype: int64\n","output_type":"stream"}],"execution_count":59},{"cell_type":"markdown","source":"---\n5. Write a Python program to convert a dictionary to a Pandas series. Sample Series: Original dictionary: {'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800} Converted series: a 100 b 200 c 300 d 400 e 800 dtype: int64","metadata":{}},{"cell_type":"code","source":"# Original dictionary\nd = {'a': 100, 'b': 200, 'c': 300, 'd': 400, 'e': 800}\n\n# Convert dictionary to Series\ns = pd.Series(d)\n\nprint(\"Converted series:\")\nprint(s)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:49.99806Z","iopub.execute_input":"2025-10-22T23:19:49.999062Z","iopub.status.idle":"2025-10-22T23:19:50.01655Z","shell.execute_reply.started":"2025-10-22T23:19:49.999029Z","shell.execute_reply":"2025-10-22T23:19:50.015607Z"}},"outputs":[{"name":"stdout","text":"Converted series:\na    100\nb    200\nc    300\nd    400\ne    800\ndtype: int64\n","output_type":"stream"}],"execution_count":60},{"cell_type":"markdown","source":"---\n6. Write a Python program to convert a NumPy array to a Pandas series. Sample Series: NumPy array: [10 20 30 40 50] Converted Pandas series: 0 10 1 20 2 30 3 40 4 50 dtype: int64","metadata":{}},{"cell_type":"code","source":"# NumPy array\nnp_array = np.array([10, 20, 30, 40, 50])\nprint(\"NumPy array:\")\nprint(np_array)\n\n# Convert NumPy array to Pandas Series\npd_series = pd.Series(np_array)\nprint(\"\\nConverted Pandas series:\")\nprint(pd_series)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.017433Z","iopub.execute_input":"2025-10-22T23:19:50.017742Z","iopub.status.idle":"2025-10-22T23:19:50.037816Z","shell.execute_reply.started":"2025-10-22T23:19:50.01772Z","shell.execute_reply":"2025-10-22T23:19:50.036835Z"}},"outputs":[{"name":"stdout","text":"NumPy array:\n[10 20 30 40 50]\n\nConverted Pandas series:\n0    10\n1    20\n2    30\n3    40\n4    50\ndtype: int64\n","output_type":"stream"}],"execution_count":61},{"cell_type":"markdown","source":"---\n7. Write a Python program to change the data type of given a column or a Series. Sample Series: Original Data Series: 0 100 1 200 2 python 3 300.12 4 400 dtype: object Change the said data type to numeric: 0 100.00 1 200.00 2 NaN 3 300.12 4 400.00 dtype: float64","metadata":{}},{"cell_type":"code","source":"# Original Data Series\ns = pd.Series(['100', '200', 'python', '300.12', '400'])\nprint(\"Original Data Series:\")\nprint(s)\n\n# Change the data type to numeric, coercing errors to NaN\ns_numeric = pd.to_numeric(s, errors='coerce')\nprint(\"\\nChanged to numeric data type:\")\nprint(s_numeric)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.041094Z","iopub.execute_input":"2025-10-22T23:19:50.041376Z","iopub.status.idle":"2025-10-22T23:19:50.058758Z","shell.execute_reply.started":"2025-10-22T23:19:50.041352Z","shell.execute_reply":"2025-10-22T23:19:50.057679Z"}},"outputs":[{"name":"stdout","text":"Original Data Series:\n0       100\n1       200\n2    python\n3    300.12\n4       400\ndtype: object\n\nChanged to numeric data type:\n0    100.00\n1    200.00\n2       NaN\n3    300.12\n4    400.00\ndtype: float64\n","output_type":"stream"}],"execution_count":62},{"cell_type":"markdown","source":"\n---\n8. Write a Python Pandas program to convert the first column of a DataFrame as a Series. Sample Output: Original DataFrame col1 col2 col3 0 1 4 7 1 2 5 5 2 3 6 8 3 4 9 12 4 7 5 1 5 11 0 11 1st column as a Series: 0 1 1 2 2 3 3 4 4 7 5 11 Name: col1, dtype: int64 <class 'pandas.core.series.Series'>","metadata":{}},{"cell_type":"code","source":"# Original DataFrame\ndf = pd.DataFrame({\n    'col1': [1, 2, 3, 4, 7, 11],\n    'col2': [4, 5, 6, 9, 5, 0],\n    'col3': [7, 5, 8, 12, 1, 11]\n})\nprint(\"Original DataFrame:\")\nprint(df)\n\n# Convert the first column to a Series\ncol1_series = df['col1']\nprint(\"\\n1st column as a Series:\")\nprint(col1_series)\nprint(type(col1_series))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.059564Z","iopub.execute_input":"2025-10-22T23:19:50.059818Z","iopub.status.idle":"2025-10-22T23:19:50.090685Z","shell.execute_reply.started":"2025-10-22T23:19:50.059799Z","shell.execute_reply":"2025-10-22T23:19:50.089268Z"}},"outputs":[{"name":"stdout","text":"Original DataFrame:\n   col1  col2  col3\n0     1     4     7\n1     2     5     5\n2     3     6     8\n3     4     9    12\n4     7     5     1\n5    11     0    11\n\n1st column as a Series:\n0     1\n1     2\n2     3\n3     4\n4     7\n5    11\nName: col1, dtype: int64\n<class 'pandas.core.series.Series'>\n","output_type":"stream"}],"execution_count":63},{"cell_type":"markdown","source":"---\n9. Write a Pandas program to convert a given Series to an array. Sample Output: Original Data Series: 0 100 1 200 2 python 3 300.12 4 400 dtype: object Series to an array ['100' '200' 'python' '300.12' '400']\n\n","metadata":{}},{"cell_type":"code","source":"s = pd.Series(['100', '200', 'python', '300.12', '400'])\nprint(\"Original Data Series:\")\nprint(s)\n\n# Convert Series to a NumPy array\nnp_array = s.to_numpy()\nprint(\"\\nSeries to an array:\")\nprint(np_array)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.092013Z","iopub.execute_input":"2025-10-22T23:19:50.092377Z","iopub.status.idle":"2025-10-22T23:19:50.112698Z","shell.execute_reply.started":"2025-10-22T23:19:50.092343Z","shell.execute_reply":"2025-10-22T23:19:50.111687Z"}},"outputs":[{"name":"stdout","text":"Original Data Series:\n0       100\n1       200\n2    python\n3    300.12\n4       400\ndtype: object\n\nSeries to an array:\n['100' '200' 'python' '300.12' '400']\n","output_type":"stream"}],"execution_count":64},{"cell_type":"markdown","source":"---\n10. Write a Pandas program to convert Series of lists to one Series. Sample Output: Original Series of list 0 [Red, Green, White] 1 [Red, Black] 2 [Yellow] dtype: object One Series 0 Red 1 Green 2 White 3 Red 4 Black 5 Yellow dtype: object","metadata":{}},{"cell_type":"code","source":"s = pd.Series([['Red', 'Green', 'White'], ['Red', 'Black'], ['Yellow']])\nprint(\"Original Series of list:\")\nprint(s)\n\n# Use explode to create one Series\ns_flat = s.explode()\nprint(\"\\nOne Series:\")\nprint(s_flat)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.113701Z","iopub.execute_input":"2025-10-22T23:19:50.114341Z","iopub.status.idle":"2025-10-22T23:19:50.134785Z","shell.execute_reply.started":"2025-10-22T23:19:50.114315Z","shell.execute_reply":"2025-10-22T23:19:50.133572Z"}},"outputs":[{"name":"stdout","text":"Original Series of list:\n0    [Red, Green, White]\n1           [Red, Black]\n2               [Yellow]\ndtype: object\n\nOne Series:\n0       Red\n0     Green\n0     White\n1       Red\n1     Black\n2    Yellow\ndtype: object\n","output_type":"stream"}],"execution_count":65},{"cell_type":"markdown","source":"---\n11. Write a Pandas program to convert Series of lists to one Series. Sample Output: Original Series of list 0 [Red, Green, White] 1 [Red, Black] 2 [Yellow] dtype: object One Series 0 Red 1 Green 2 White 3 Red 4 Black 5 Yellow dtype: object","metadata":{}},{"cell_type":"code","source":"s = pd.Series(['100', '200', 'python', '300.12', '400'])\nprint(\"Original Data Series:\")\nprint(s)\n\n# Sort the series\ns_sorted = s.sort_values()\nprint(\"\\nSorted Series:\")\nprint(s_sorted)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.135733Z","iopub.execute_input":"2025-10-22T23:19:50.136039Z","iopub.status.idle":"2025-10-22T23:19:50.155531Z","shell.execute_reply.started":"2025-10-22T23:19:50.136018Z","shell.execute_reply":"2025-10-22T23:19:50.154505Z"}},"outputs":[{"name":"stdout","text":"Original Data Series:\n0       100\n1       200\n2    python\n3    300.12\n4       400\ndtype: object\n\nSorted Series:\n0       100\n1       200\n3    300.12\n4       400\n2    python\ndtype: object\n","output_type":"stream"}],"execution_count":66},{"cell_type":"markdown","source":"---\n12. Write a Pandas program to add some data to an existing Series. Sample Output: Original Data Series: 0 100 1 200 2 python 3 300.12 4 400 dtype: object Data Series after adding some data: 0 100 1 200 2 python 3 300.12 4 400 0 500 1 php dtype: object","metadata":{}},{"cell_type":"code","source":"s = pd.Series(['100', '200', 'python', '300.12', '400'])\nprint(\"Original Data Series:\")\nprint(s)\n\n# New data to add\nnew_data = pd.Series(['500', 'php'])\n\n# Add the new data using concat\ns_extended = pd.concat([s, new_data], ignore_index=True)\n\nprint(\"\\nData Series after adding some data:\")\nprint(s_extended)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.156518Z","iopub.execute_input":"2025-10-22T23:19:50.156824Z","iopub.status.idle":"2025-10-22T23:19:50.171843Z","shell.execute_reply.started":"2025-10-22T23:19:50.156801Z","shell.execute_reply":"2025-10-22T23:19:50.170871Z"}},"outputs":[{"name":"stdout","text":"Original Data Series:\n0       100\n1       200\n2    python\n3    300.12\n4       400\ndtype: object\n\nData Series after adding some data:\n0       100\n1       200\n2    python\n3    300.12\n4       400\n5       500\n6       php\ndtype: object\n","output_type":"stream"}],"execution_count":67},{"cell_type":"markdown","source":"---\n\n```END OF ASSIGNMENT```\n\n---","metadata":{}},{"cell_type":"markdown","source":"## Assessment","metadata":{}},{"cell_type":"markdown","source":"#### See the attached datasets in Data Analysis folder ``` Beijing_PEK_2014.csv, Brasilia_BSB_2014.csv, CapeTown_CPT_2014.csv, Delhi_DEL_2014.csv, London_2014.csv, and Moscow_SVO_2014.csv.``` Explore them, run your analysis on them, and detail your findings below as much as you can.","metadata":{}},{"cell_type":"markdown","source":"---\n## findings","metadata":{}},{"cell_type":"markdown","source":"Dataset Overview Report\n1. General Summary\n\nThe dataset contains daily weather records for six global cities, Beijing, Brasilia, Cape Town, Delhi, London, and Moscow each covering one full year (365 rows and 23 columns).\nColumns capture temperature, humidity, visibility, wind speed, and event types such as rain, fog, or snow.\nSome columns (e.g., ' Max Gust SpeedKm/h', ' CloudCover', ' Events') contain many missing entries, suggesting incomplete recording for certain days.\n\n2. Data Structure and Quality\n\n* Rows and Columns: Each city dataset has a uniform structure: 365 days × 23 columns.\n\n* Data Types: Mostly numerical (int64, float64) with categorical (object) columns for Date and Events.\n\n* Missing Data: Common across all cities, especially in ' Events', ' CloudCover', and ' Max Gust SpeedKm/h'.\n\n* Naming Anomalies: Several columns include leading spaces or HTML remnants (e.g., 'WindDirDegrees<br />'), indicating an unclean export.\n\n3. Categorical Insights (Events)\n\n* Rain is the most frequently recorded event in most cities.\n\n* London has the highest number of rainy days (202), confirming its wet climate.\n\n* Beijing and Delhi contain many days with no recorded events (243+ and 273 NaN values respectively).\n\n* Moscow alternates between Snow (73) and Rain (70), matching cold-season weather patterns.\n\n* Brasilia experiences many Rain-Thunderstorm days (75), consistent with tropical weather behavior.\n\n4. Grouped Averages (by Event Type)\n\n* Grouping by event type reveals distinct trends:\n\n* Rain and Thunderstorm days typically show higher mean temperatures but moderate humidity.\n\n* Fog and Snow days consistently correspond to lower temperatures and higher humidity.\n\nFor example:\n\n- In London, foggy days average 10°C and 77% humidity, while Rain-Thunderstorm days rise to 16°C with lower humidity (~74%).\n\n- In Moscow, Snow days average –6°C with 83% humidity, confirming cold, moist air conditions.\n\n- Delhi shows an inverse pattern, Thunderstorms occur at high temperatures (~22°C) but with low humidity (~40%).\n\n5. Overall Interpretation\n\n* The datasets successfully capture annual climate behavior for multiple regions.\n\n* Rain and Fog are the most recurrent weather types globally, though their temperature-humidity relationship varies by geography.\n\n* The presence of incomplete event data (NaN) likely represents calm or unreported days rather than true missing records.\n\n* Overall, the datasets provide a solid foundation for studying climate variability, event correlation, and seasonal weather patterns across continents.\n\n``` scroll down under 'analysis' to see my code for this ```","metadata":{}},{"cell_type":"markdown","source":"---","metadata":{}},{"cell_type":"markdown","source":"# Link to your publication","metadata":{}},{"cell_type":"markdown","source":"## [hashnode](https://nerdyalgorithm.hashnode.dev/week-5-at-dataraflow)","metadata":{}},{"cell_type":"markdown","source":"---\n## Analysis","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\n\nprint(\"Libraries imported!\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.173061Z","iopub.execute_input":"2025-10-22T23:19:50.173305Z","iopub.status.idle":"2025-10-22T23:19:50.187646Z","shell.execute_reply.started":"2025-10-22T23:19:50.173286Z","shell.execute_reply":"2025-10-22T23:19:50.186408Z"}},"outputs":[{"name":"stdout","text":"Libraries imported!\n","output_type":"stream"}],"execution_count":68},{"cell_type":"code","source":"# Define the file paths for the datasets\nfiles_to_load = {\n    \"Beijing\": \"/kaggle/input/dataraflow-data-analysis-dataset/Beijing_PEK_2014.csv\",\n    \"Brasilia\": \"/kaggle/input/dataraflow-data-analysis-dataset/Brasilia_BSB_2014.csv\",\n    \"Cape Town\": \"/kaggle/input/dataraflow-data-analysis-dataset/CapeTown_CPT_2014.csv\",\n    \"Delhi\": \"/kaggle/input/dataraflow-data-analysis-dataset/Delhi_DEL_2014.csv\",\n    \"London\": \"/kaggle/input/dataraflow-data-analysis-dataset/London_2014.csv\",\n    \"Moscow\": \"/kaggle/input/dataraflow-data-analysis-dataset/Moscow_SVO_2014.csv\"\n}\n\n# Create an empty dictionary to store the loaded DataFrames\ndatasets = {}\n\nprint(\"--- Loading All Datasets ---\")\n# Loop through each file, load it with pd.read_csv, and store it\nfor city_name, file_path in files_to_load.items():\n    try:\n        # Load the file normally first\n        datasets[city_name] = pd.read_csv(file_path)\n        print(f\"Successfully loaded {city_name}\")\n    except Exception as e:\n        print(f\"Error loading {city_name}: {e}\")\n\nprint(\"--- Initial data loading complete ---\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.188633Z","iopub.execute_input":"2025-10-22T23:19:50.188947Z","iopub.status.idle":"2025-10-22T23:19:50.242928Z","shell.execute_reply.started":"2025-10-22T23:19:50.188926Z","shell.execute_reply":"2025-10-22T23:19:50.242079Z"}},"outputs":[{"name":"stdout","text":"--- Loading All Datasets ---\nSuccessfully loaded Beijing\nSuccessfully loaded Brasilia\nSuccessfully loaded Cape Town\nSuccessfully loaded Delhi\nSuccessfully loaded London\nSuccessfully loaded Moscow\n--- Initial data loading complete ---\n","output_type":"stream"}],"execution_count":69},{"cell_type":"code","source":"for city_name, df in datasets.items():\n    print(f\"\\n--- HEAD for {city_name} ---\")\n    print(df.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.243731Z","iopub.execute_input":"2025-10-22T23:19:50.24399Z","iopub.status.idle":"2025-10-22T23:19:50.28272Z","shell.execute_reply.started":"2025-10-22T23:19:50.24397Z","shell.execute_reply":"2025-10-22T23:19:50.281636Z"}},"outputs":[{"name":"stdout","text":"\n--- HEAD for Beijing ---\n       Date  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                12                  4                -2   \n1  2014-1-2                 7                  0                -6   \n2  2014-1-3                 9                  3                -2   \n3  2014-1-4                 2                 -2                -6   \n4  2014-1-5                 7                  0                -7   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0         -12             -17            -20            44              19   \n1          -6              -9            -13            74              50   \n2          -7             -13            -18            64              32   \n3          -4              -7             -9            80              68   \n4          -5             -11            -15            80              51   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0              7  ...                 31                  11   \n1             28  ...                 18                   7   \n2              9  ...                 31                  13   \n3             44  ...                 10                   5   \n4             15  ...                 31                   7   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0                  5                   32                    16   \n1                  3                   18                     5   \n2                  5                   18                     8   \n3                  2                   11                     5   \n4                  3                   18                    10   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover   Events  \\\n0                 47.0              0.0          NaN      NaN   \n1                  NaN              0.0          NaN      NaN   \n2                  NaN              0.0          NaN      NaN   \n3                  NaN              0.0          2.0      NaN   \n4                  NaN              0.0          NaN      NaN   \n\n   WindDirDegrees<br />  \n0             291<br />  \n1              20<br />  \n2              24<br />  \n3              56<br />  \n4              18<br />  \n\n[5 rows x 23 columns]\n\n--- HEAD for Brasilia ---\n       Date  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                31                 24                17   \n1  2014-1-2                30                 23                17   \n2  2014-1-3                32                 24                18   \n3  2014-1-4                32                 25                18   \n4  2014-1-5                30                 24                19   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0          19              18             16            94              64   \n1          19              17             14            94              65   \n2          20              15             11            88              55   \n3          17              13              8            77              47   \n4          16              13              9            83              48   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0             33  ...                 19                  11   \n1             33  ...                 19                  12   \n2             19  ...                 19                  13   \n3             16  ...                 19                  12   \n4             23  ...                 19                  12   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0                 10                   14                     5   \n1                 10                   16                     5   \n2                 10                   19                     6   \n3                 10                   24                     6   \n4                 10                   24                     8   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover        Events  \\\n0                  NaN              0.0          3.0  Thunderstorm   \n1                  NaN              0.0          2.0           NaN   \n2                  NaN              0.0          2.0           NaN   \n3                  NaN              0.0          2.0           NaN   \n4                  NaN              0.0          3.0          Rain   \n\n   WindDirDegrees<br />  \n0             125<br />  \n1             102<br />  \n2             133<br />  \n3             106<br />  \n4             106<br />  \n\n[5 rows x 23 columns]\n\n--- HEAD for Cape Town ---\n       Date  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                28                 23                18   \n1  2014-1-2                28                 23                18   \n2  2014-1-3                27                 23                19   \n3  2014-1-4                27                 22                18   \n4  2014-1-5                26                 22                18   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0          19              17             15            88              71   \n1          19              18             16            88              74   \n2          19              18             18            94              75   \n3          19              18             14            88              74   \n4          17              16             14            83              70   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0             45  ...               19.0                14.0   \n1             46  ...               26.0                13.0   \n2             48  ...               31.0                12.0   \n3             46  ...               26.0                13.0   \n4             46  ...               26.0                13.0   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0               10.0                   35                    14   \n1               10.0                   32                    21   \n2                3.0                   32                    26   \n3                9.0                   32                    18   \n4               10.0                   45                    21   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover   Events  \\\n0                  NaN              0.0          2.0      NaN   \n1                  NaN              0.0          2.0      NaN   \n2                  NaN              0.0          4.0      NaN   \n3                  NaN              0.0          3.0      NaN   \n4                  NaN              0.0          4.0     Rain   \n\n   WindDirDegrees<br />  \n0             213<br />  \n1             204<br />  \n2             193<br />  \n3             314<br />  \n4              25<br />  \n\n[5 rows x 23 columns]\n\n--- HEAD for Delhi ---\n       Date  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                -4                 -7                -9   \n1  2014-1-2                -1                 -4                -8   \n2  2014-1-3                 1                 -3                -8   \n3  2014-1-4                -1                 -2                -3   \n4  2014-1-5                -1                 -3                -6   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0          -9             -10            -11            82              70   \n1          -6              -8            -11            75              69   \n2          -4              -6            -10            84              72   \n3          -4              -5             -6            80              74   \n4          -4              -6             -8            93              79   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0             58  ...                  2                   2   \n1             53  ...                  3                   2   \n2             54  ...                  3                   2   \n3             64  ...                  8                   4   \n4             71  ...                  6                   3   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0                  2                    6                     2   \n1                  2                    6                     0   \n2                  2                    6                     0   \n3                  2                   14                     2   \n4                  2                   14                     2   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover   Events  \\\n0                  NaN              0.0          8.0      NaN   \n1                  NaN              0.0          8.0      NaN   \n2                  NaN              0.0          8.0      NaN   \n3                  NaN              0.0          8.0      NaN   \n4                  NaN              0.0          8.0     Snow   \n\n   WindDirDegrees<br />  \n0              -1<br />  \n1              -1<br />  \n2              -1<br />  \n3              -1<br />  \n4              -1<br />  \n\n[5 rows x 23 columns]\n\n--- HEAD for London ---\n        GMT  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                11                  8                 6   \n1  2014-1-2                11                  9                 6   \n2  2014-1-3                11                  8                 6   \n3  2014-1-4                 9                  6                 3   \n4  2014-1-5                12                  7                 1   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0           9               7              4            94              86   \n1           9               6              4            94              81   \n2           9               5              2            94              76   \n3           8               6              2            93              85   \n4          11               4             -1           100              88   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0             73  ...                 31                  11   \n1             60  ...                 31                  15   \n2             54  ...                 31                  12   \n3             65  ...                 31                  12   \n4             77  ...                 31                  14   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0                  2                   40                    26   \n1                  5                   32                    21   \n2                  0                   50                    29   \n3                  5                   35                    21   \n4                  5                   35                    16   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover             Events  \\\n0                 66.0             9.91          4.0               Rain   \n1                 50.0             1.02          2.0               Rain   \n2                 69.0             7.11          2.0  Rain-Thunderstorm   \n3                 39.0             9.91          4.0               Rain   \n4                  NaN             0.25          5.0               Rain   \n\n   WindDirDegrees<br />  \n0             186<br />  \n1             214<br />  \n2             219<br />  \n3             211<br />  \n4             199<br />  \n\n[5 rows x 23 columns]\n\n--- HEAD for Moscow ---\n       Date  Max TemperatureC  Mean TemperatureC  Min TemperatureC  \\\n0  2014-1-1                 1                 -1                -2   \n1  2014-1-2                -2                 -3                -5   \n2  2014-1-3                -1                 -3                -4   \n3  2014-1-4                -1                 -2                -2   \n4  2014-1-5                 1                  0                -1   \n\n   Dew PointC  MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\n0          -2              -3             -5            87              81   \n1          -4              -5             -6            93              87   \n2          -2              -4             -6           100              89   \n3          -3              -4             -5            93              85   \n4           1              -1             -3           100              93   \n\n    Min Humidity  ...   Max VisibilityKm   Mean VisibilityKm  \\\n0             75  ...               10.0                10.0   \n1             80  ...               10.0                10.0   \n2             80  ...               10.0                 7.0   \n3             80  ...               10.0                 6.0   \n4             81  ...               10.0                 6.0   \n\n    Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\n0               10.0                   21                    14   \n1               10.0                   18                    13   \n2                3.0                   21                    11   \n3                3.0                   18                    13   \n4                1.0                   26                    16   \n\n    Max Gust SpeedKm/h  Precipitationmm   CloudCover   Events  \\\n0                  NaN              0.0          8.0      NaN   \n1                  NaN              0.0          8.0      NaN   \n2                 32.0              0.0          8.0     Snow   \n3                 32.0              0.0          8.0     Snow   \n4                  NaN              0.0          8.0     Snow   \n\n   WindDirDegrees<br />  \n0             227<br />  \n1             200<br />  \n2             134<br />  \n3             157<br />  \n4             195<br />  \n\n[5 rows x 23 columns]\n","output_type":"stream"}],"execution_count":70},{"cell_type":"code","source":"# --- BASIC OVERVIEW OF EACH CITY DATASET ---\n\n# Loop through each city and its DataFrame in the 'datasets' dictionary\nfor city_name, df in datasets.items():\n    print(f\"\\n=== {city_name} Dataset Overview ===\")\n\n    # 1. Show the shape — tells how many rows and columns are in the dataset\n    print(\"Shape:\", df.shape)\n\n    # 2. Show info — gives column names, data types, and count of non-missing values\n    print(\"\\nInfo:\")\n    print(df.info())\n\n    # 3. Print a separator line for readability between each city’s output\n    print(\"-\" * 50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:32:00.27227Z","iopub.execute_input":"2025-10-22T23:32:00.272871Z","iopub.status.idle":"2025-10-22T23:32:00.320542Z","shell.execute_reply.started":"2025-10-22T23:32:00.272842Z","shell.execute_reply":"2025-10-22T23:32:00.319268Z"}},"outputs":[{"name":"stdout","text":"\n=== Beijing Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Date                         365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            365 non-null    int64  \n 14   Mean VisibilityKm           365 non-null    int64  \n 15   Min VisibilitykM            365 non-null    int64  \n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          154 non-null    float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  141 non-null    float64\n 21   Events                      122 non-null    object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(3), int64(17), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n\n=== Brasilia Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Date                         365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            365 non-null    int64  \n 14   Mean VisibilityKm           365 non-null    int64  \n 15   Min VisibilitykM            365 non-null    int64  \n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          36 non-null     float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  334 non-null    float64\n 21   Events                      162 non-null    object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(3), int64(17), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n\n=== Cape Town Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Date                         365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            363 non-null    float64\n 14   Mean VisibilityKm           363 non-null    float64\n 15   Min VisibilitykM            363 non-null    float64\n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          50 non-null     float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  310 non-null    float64\n 21   Events                      136 non-null    object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(6), int64(14), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n\n=== Delhi Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Date                         365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            365 non-null    int64  \n 14   Mean VisibilityKm           365 non-null    int64  \n 15   Min VisibilitykM            365 non-null    int64  \n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          2 non-null      float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  285 non-null    float64\n 21   Events                      92 non-null     object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(3), int64(17), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n\n=== London Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   GMT                          365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            365 non-null    int64  \n 14   Mean VisibilityKm           365 non-null    int64  \n 15   Min VisibilitykM            365 non-null    int64  \n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          131 non-null    float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  355 non-null    float64\n 21   Events                      251 non-null    object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(3), int64(17), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n\n=== Moscow Dataset Overview ===\nShape: (365, 23)\n\nInfo:\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 365 entries, 0 to 364\nData columns (total 23 columns):\n #   Column                       Non-Null Count  Dtype  \n---  ------                       --------------  -----  \n 0   Date                         365 non-null    object \n 1   Max TemperatureC             365 non-null    int64  \n 2   Mean TemperatureC            365 non-null    int64  \n 3   Min TemperatureC             365 non-null    int64  \n 4   Dew PointC                   365 non-null    int64  \n 5   MeanDew PointC               365 non-null    int64  \n 6   Min DewpointC                365 non-null    int64  \n 7   Max Humidity                 365 non-null    int64  \n 8    Mean Humidity               365 non-null    int64  \n 9    Min Humidity                365 non-null    int64  \n 10   Max Sea Level PressurehPa   365 non-null    int64  \n 11   Mean Sea Level PressurehPa  365 non-null    int64  \n 12   Min Sea Level PressurehPa   365 non-null    int64  \n 13   Max VisibilityKm            333 non-null    float64\n 14   Mean VisibilityKm           333 non-null    float64\n 15   Min VisibilitykM            333 non-null    float64\n 16   Max Wind SpeedKm/h          365 non-null    int64  \n 17   Mean Wind SpeedKm/h         365 non-null    int64  \n 18   Max Gust SpeedKm/h          213 non-null    float64\n 19  Precipitationmm              365 non-null    float64\n 20   CloudCover                  333 non-null    float64\n 21   Events                      216 non-null    object \n 22  WindDirDegrees<br />         365 non-null    object \ndtypes: float64(6), int64(14), object(3)\nmemory usage: 65.7+ KB\nNone\n--------------------------------------------------\n","output_type":"stream"}],"execution_count":72},{"cell_type":"code","source":"# --- NUMERICAL SUMMARY USING .describe() ---\n\n# Loop through each city dataset again\nfor city_name, df in datasets.items():\n    print(f\"\\n=== {city_name} Dataset: Statistical Summary ===\")\n    \n    # .describe() gives quick statistics for all numerical columns\n    # Includes count, mean, std (standard deviation), min, max, and quartiles\n    print(df.describe())\n    \n    # Add a separator for clarity\n    print(\"-\" * 50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:33:07.868905Z","iopub.execute_input":"2025-10-22T23:33:07.869595Z","iopub.status.idle":"2025-10-22T23:33:08.101689Z","shell.execute_reply.started":"2025-10-22T23:33:07.869565Z","shell.execute_reply":"2025-10-22T23:33:08.100729Z"}},"outputs":[{"name":"stdout","text":"\n=== Beijing Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          19.523288          13.364384          7.542466    6.580822   \nstd           11.249060          10.937703         11.032742   12.328479   \nmin           -2.000000          -7.000000        -13.000000  -24.000000   \n25%            9.000000           3.000000         -3.000000   -4.000000   \n50%           22.000000          14.000000          9.000000    9.000000   \n75%           30.000000          23.000000         18.000000   18.000000   \nmax           42.000000          31.000000         27.000000   25.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean         2.123288      -2.465753     78.630137       50.753425   \nstd         13.762452      15.056015     18.203299       19.083953   \nmin        -33.000000     -40.000000     19.000000        8.000000   \n25%         -9.000000     -14.000000     69.000000       37.000000   \n50%          3.000000      -2.000000     83.000000       50.000000   \n75%         15.000000      11.000000     94.000000       65.000000   \nmax         24.000000      23.000000    100.000000       93.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       23.753425                 1019.536986                  1016.657534   \nstd        17.474142                   10.026442                     9.641969   \nmin         4.000000                 1001.000000                   996.000000   \n25%         8.000000                 1010.000000                  1008.000000   \n50%        20.000000                 1019.000000                  1016.000000   \n75%        36.000000                 1028.000000                  1025.000000   \nmax        81.000000                 1039.000000                  1037.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         365.000000          365.000000   \nmean                  1013.934247          18.073973            9.504110   \nstd                      9.512055          10.124907            6.458074   \nmin                    993.000000           2.000000            1.000000   \n25%                   1005.000000           8.000000            5.000000   \n50%                   1014.000000          18.000000            7.000000   \n75%                   1022.000000          31.000000           13.000000   \nmax                   1034.000000          31.000000           31.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         365.000000           365.000000            365.000000   \nmean            4.131507            21.961644              8.942466   \nstd             3.993019            10.709894              4.651536   \nmin             0.000000             6.000000              3.000000   \n25%             2.000000            14.000000              6.000000   \n50%             3.000000            18.000000              8.000000   \n75%             6.000000            26.000000             10.000000   \nmax            31.000000            72.000000             34.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount            154.00000       365.000000   141.000000  \nmean              43.61039         1.112027     5.624113  \nstd               15.27025         5.510722     2.657977  \nmin               21.00000         0.000000     1.000000  \n25%               32.00000         0.000000     3.000000  \n50%               40.00000         0.000000     7.000000  \n75%               50.00000         0.000000     8.000000  \nmax               93.00000        75.950000     8.000000  \n--------------------------------------------------\n\n=== Brasilia Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          28.284932          22.895890         17.726027   15.813699   \nstd            2.324243           2.035431          2.702564    3.496203   \nmin           19.000000          16.000000          9.000000    6.000000   \n25%           27.000000          21.000000         16.000000   13.000000   \n50%           28.000000          23.000000         18.000000   17.000000   \n75%           29.000000          24.000000         20.000000   19.000000   \nmax           36.000000          28.000000         23.000000   22.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean        13.676712      10.558904     79.504110       58.068493   \nstd          3.896974       4.949188     11.356758       13.868821   \nmin          3.000000      -5.000000     47.000000       26.000000   \n25%         11.000000       7.000000     73.000000       49.000000   \n50%         14.000000      11.000000     83.000000       58.000000   \n75%         17.000000      15.000000     88.000000       70.000000   \nmax         19.000000      18.000000    100.000000       88.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       29.780822                 1021.410959                  1019.219178   \nstd        14.187952                    2.347758                     2.333738   \nmin         6.000000                 1015.000000                  1014.000000   \n25%        19.000000                 1020.000000                  1018.000000   \n50%        27.000000                 1021.000000                  1019.000000   \n75%        39.000000                 1023.000000                  1020.000000   \nmax        73.000000                 1028.000000                  1026.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         365.000000          365.000000   \nmean                  1017.016438          18.975342           12.265753   \nstd                      2.523462           0.471082            2.459128   \nmin                   1012.000000          10.000000            7.000000   \n25%                   1015.000000          19.000000           11.000000   \n50%                   1017.000000          19.000000           12.000000   \n75%                   1018.000000          19.000000           13.000000   \nmax                   1025.000000          19.000000           19.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         365.000000           365.000000            365.000000   \nmean            8.780822            22.364384              7.632877   \nstd             4.389193            11.227730              2.659632   \nmin             0.000000            10.000000              3.000000   \n25%             6.000000            19.000000              6.000000   \n50%            10.000000            21.000000              8.000000   \n75%            10.000000            24.000000             10.000000   \nmax            19.000000           195.000000             19.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount            36.000000       365.000000   334.000000  \nmean             43.444444         2.059315     3.523952  \nstd               9.012513         6.186198     1.312115  \nmin              26.000000         0.000000     1.000000  \n25%              39.000000         0.000000     3.000000  \n50%              41.000000         0.000000     3.000000  \n75%              52.000000         0.760000     5.000000  \nmax              66.000000        57.910000     7.000000  \n--------------------------------------------------\n\n=== Cape Town Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          22.684932          17.567123         12.509589   13.783562   \nstd            4.839957           4.148880          4.288118    3.018215   \nmin           11.000000           7.000000          1.000000    5.000000   \n25%           19.000000          14.000000          9.000000   12.000000   \n50%           23.000000          18.000000         13.000000   14.000000   \n75%           26.000000          21.000000         16.000000   16.000000   \nmax           37.000000          28.000000         22.000000   21.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean        11.583562       9.134247     87.452055       68.758904   \nstd          3.289469       3.892943      7.311817        8.740581   \nmin          2.000000      -2.000000     63.000000       42.000000   \n25%          9.000000       6.000000     82.000000       62.000000   \n50%         12.000000       9.000000     88.000000       69.000000   \n75%         14.000000      12.000000     94.000000       76.000000   \nmax         20.000000      18.000000    100.000000       88.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       42.150685                 1019.347945                  1016.654795   \nstd        12.762918                    5.428054                     5.220549   \nmin         0.000000                 1006.000000                  1004.000000   \n25%        34.000000                 1016.000000                  1013.000000   \n50%        42.000000                 1019.000000                  1016.000000   \n75%        50.000000                 1022.000000                  1020.000000   \nmax        78.000000                 1036.000000                  1034.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         363.000000          363.000000   \nmean                  1014.232877          27.325069           14.468320   \nstd                      5.284023           4.696196            4.397509   \nmin                   1002.000000          10.000000            6.000000   \n25%                   1010.000000          26.000000           12.000000   \n50%                   1014.000000          31.000000           13.000000   \n75%                   1017.000000          31.000000           16.000000   \nmax                   1033.000000          31.000000           31.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         363.000000           365.000000            365.000000   \nmean            8.650138            31.090411             16.934247   \nstd             5.022207            10.294031              7.334703   \nmin             0.000000            11.000000              5.000000   \n25%             6.000000            23.000000             11.000000   \n50%            10.000000            32.000000             16.000000   \n75%            10.000000            39.000000             21.000000   \nmax            31.000000            58.000000             43.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount            50.000000       365.000000   310.000000  \nmean             55.600000         1.173288     3.087097  \nstd              10.006121         4.503512     1.790526  \nmin              34.000000         0.000000     1.000000  \n25%              48.000000         0.000000     1.000000  \n50%              56.500000         0.000000     3.000000  \n75%              63.000000         0.000000     5.000000  \nmax              76.000000        59.940000     7.000000  \n--------------------------------------------------\n\n=== Delhi Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          20.200000          13.709589          7.197260    6.443836   \nstd           11.521409          10.060151          8.855339    6.440364   \nmin           -6.000000         -11.000000        -17.000000  -13.000000   \n25%           11.000000           6.000000          1.000000    2.000000   \n50%           21.000000          14.000000          8.000000    8.000000   \n75%           31.000000          23.000000         15.000000   12.000000   \nmax           38.000000          30.000000         23.000000   18.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean         3.783562       0.506849     74.813699       50.638356   \nstd          6.511170       6.703950     16.751688       18.401077   \nmin        -15.000000     -22.000000     30.000000       16.000000   \n25%         -1.000000      -4.000000     60.000000       35.000000   \n50%          4.000000       1.000000     78.000000       49.000000   \n75%          9.000000       6.000000     88.000000       65.000000   \nmax         16.000000      13.000000    100.000000       94.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       27.410959                 1019.200000                  1015.200000   \nstd        18.439264                    7.746038                     8.261921   \nmin         4.000000                 1000.000000                   997.000000   \n25%        14.000000                 1014.000000                  1009.000000   \n50%        21.000000                 1017.000000                  1014.000000   \n75%        38.000000                 1025.000000                  1021.000000   \nmax        84.000000                 1042.000000                  1036.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         365.000000          365.000000   \nmean                  1010.920548          11.575342            9.512329   \nstd                      9.486355           2.833851            2.098662   \nmin                    991.000000           2.000000            2.000000   \n25%                   1003.000000          10.000000            9.000000   \n50%                   1010.000000          11.000000           10.000000   \n75%                   1018.000000          14.000000           11.000000   \nmax                   1035.000000          19.000000           14.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         365.000000           365.000000            365.000000   \nmean            8.202740            19.265753              5.915068   \nstd             3.022351            14.916362              4.449462   \nmin             0.000000             0.000000              0.000000   \n25%             8.000000            11.000000              3.000000   \n50%            10.000000            18.000000              5.000000   \n75%            10.000000            23.000000              6.000000   \nmax            10.000000           209.000000             37.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount             2.000000       365.000000   285.000000  \nmean             47.500000         0.617288     3.508772  \nstd               7.778175         1.772568     2.610399  \nmin              42.000000         0.000000     0.000000  \n25%              44.750000         0.000000     1.000000  \n50%              47.500000         0.000000     3.000000  \n75%              50.250000         0.000000     6.000000  \nmax              53.000000        11.940000     8.000000  \n--------------------------------------------------\n\n=== London Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          16.328767          12.328767          8.293151   10.356164   \nstd            5.766174           5.087300          4.773908    3.835096   \nmin            4.000000           1.000000         -4.000000    1.000000   \n25%           11.000000           8.000000          5.000000    8.000000   \n50%           16.000000          12.000000          8.000000   11.000000   \n75%           21.000000          17.000000         12.000000   13.000000   \nmax           30.000000          24.000000         19.000000   19.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean         7.863014       5.241096     93.145205       73.802740   \nstd          3.929024       4.177643      5.685267       10.379317   \nmin         -2.000000      -6.000000     71.000000       48.000000   \n25%          4.000000       2.000000     88.000000       66.000000   \n50%          8.000000       5.000000     94.000000       74.000000   \n75%         11.000000       8.000000    100.000000       82.000000   \nmax         17.000000      15.000000    100.000000       96.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       47.019178                 1015.980822                  1012.386301   \nstd        16.107201                    9.523087                    10.393432   \nmin        15.000000                  987.000000                   979.000000   \n25%        34.000000                 1011.000000                  1006.000000   \n50%        45.000000                 1016.000000                  1013.000000   \n75%        60.000000                 1023.000000                  1020.000000   \nmax        92.000000                 1043.000000                  1041.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         365.000000          365.000000   \nmean                  1008.994521          28.808219           13.167123   \nstd                     11.424861           4.842740            3.339246   \nmin                    975.000000           6.000000            3.000000   \n25%                   1002.000000          29.000000           11.000000   \n50%                   1011.000000          31.000000           13.000000   \n75%                   1017.000000          31.000000           15.000000   \nmax                   1038.000000          31.000000           24.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         365.000000           365.000000            365.000000   \nmean            6.183562            25.175342             13.863014   \nstd             3.255047             9.238414              6.374561   \nmin             0.000000             8.000000              3.000000   \n25%             3.000000            19.000000             10.000000   \n50%             6.000000            24.000000             13.000000   \n75%            10.000000            29.000000             16.000000   \nmax            10.000000            66.000000             47.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount           131.000000       365.000000   355.000000  \nmean             47.541985         1.378356     3.177465  \nstd              11.514045         3.097608     1.433872  \nmin              27.000000         0.000000     1.000000  \n25%              39.000000         0.000000     2.000000  \n50%              47.000000         0.000000     3.000000  \n75%              53.000000         1.020000     4.000000  \nmax              90.000000        21.080000     7.000000  \n--------------------------------------------------\n\n=== Moscow Dataset: Statistical Summary ===\n       Max TemperatureC  Mean TemperatureC  Min TemperatureC  Dew PointC  \\\ncount        365.000000         365.000000        365.000000  365.000000   \nmean          10.334247           5.994521          2.063014    3.621918   \nstd           12.195210          10.724829          9.657536    9.114025   \nmin          -19.000000         -21.000000        -26.000000  -24.000000   \n25%            1.000000          -1.000000         -4.000000   -3.000000   \n50%            9.000000           6.000000          2.000000    4.000000   \n75%           21.000000          14.000000         10.000000   12.000000   \nmax           33.000000          26.000000         19.000000   20.000000   \n\n       MeanDew PointC  Min DewpointC  Max Humidity   Mean Humidity  \\\ncount      365.000000     365.000000    365.000000      365.000000   \nmean         1.104110      -1.580822     91.301370       73.378082   \nstd          9.163659       9.464054      9.824679       15.895765   \nmin        -26.000000     -29.000000     54.000000       40.000000   \n25%         -6.000000      -8.000000     87.000000       61.000000   \n50%          2.000000      -1.000000     93.000000       76.000000   \n75%          9.000000       7.000000    100.000000       87.000000   \nmax         18.000000      15.000000    100.000000      100.000000   \n\n        Min Humidity   Max Sea Level PressurehPa   Mean Sea Level PressurehPa  \\\ncount     365.000000                  365.000000                   365.000000   \nmean       55.939726                 1019.723288                  1017.112329   \nstd        21.494867                    9.774526                    10.445357   \nmin        16.000000                  981.000000                   974.000000   \n25%        37.000000                 1014.000000                  1011.000000   \n50%        54.000000                 1019.000000                  1017.000000   \n75%        75.000000                 1026.000000                  1023.000000   \nmax        93.000000                 1053.000000                  1053.000000   \n\n        Min Sea Level PressurehPa   Max VisibilityKm   Mean VisibilityKm  \\\ncount                  365.000000         333.000000          333.000000   \nmean                  1014.454795           9.537538            8.291291   \nstd                     10.945231           1.218310            2.073023   \nmin                    970.000000           3.000000            1.000000   \n25%                   1008.000000          10.000000            7.000000   \n50%                   1015.000000          10.000000            9.000000   \n75%                   1021.000000          10.000000           10.000000   \nmax                   1052.000000          10.000000           10.000000   \n\n        Min VisibilitykM   Max Wind SpeedKm/h   Mean Wind SpeedKm/h  \\\ncount         333.000000           365.000000            365.000000   \nmean            5.819820            22.863014             12.835616   \nstd             3.304428             6.787017              4.949785   \nmin             0.000000             6.000000              2.000000   \n25%             3.000000            18.000000             10.000000   \n50%             6.000000            21.000000             13.000000   \n75%             9.000000            29.000000             16.000000   \nmax            10.000000            47.000000             27.000000   \n\n        Max Gust SpeedKm/h  Precipitationmm   CloudCover  \ncount           213.000000            365.0   333.000000  \nmean             40.065728              0.0     5.930931  \nstd               8.382675              0.0     1.935256  \nmin              21.000000              0.0     0.000000  \n25%              35.000000              0.0     5.000000  \n50%              40.000000              0.0     6.000000  \n75%              47.000000              0.0     7.000000  \nmax              72.000000              0.0     8.000000  \n--------------------------------------------------\n","output_type":"stream"}],"execution_count":73},{"cell_type":"code","source":"# --- CHECK ACTUAL COLUMN NAMES ---\n\n# Loop through each city and print the exact list of column names\nfor city_name, df in datasets.items():\n    print(f\"\\n=== {city_name} Columns ===\")\n    \n    # List all column names to see if there are extra spaces or special characters\n    print(df.columns.tolist())\n    \n    print(\"-\" * 50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:35:04.2783Z","iopub.execute_input":"2025-10-22T23:35:04.27862Z","iopub.status.idle":"2025-10-22T23:35:04.284234Z","shell.execute_reply.started":"2025-10-22T23:35:04.278598Z","shell.execute_reply":"2025-10-22T23:35:04.283245Z"}},"outputs":[{"name":"stdout","text":"\n=== Beijing Columns ===\n['Date', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n\n=== Brasilia Columns ===\n['Date', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n\n=== Cape Town Columns ===\n['Date', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n\n=== Delhi Columns ===\n['Date', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n\n=== London Columns ===\n['GMT', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n\n=== Moscow Columns ===\n['Date', 'Max TemperatureC', 'Mean TemperatureC', 'Min TemperatureC', 'Dew PointC', 'MeanDew PointC', 'Min DewpointC', 'Max Humidity', ' Mean Humidity', ' Min Humidity', ' Max Sea Level PressurehPa', ' Mean Sea Level PressurehPa', ' Min Sea Level PressurehPa', ' Max VisibilityKm', ' Mean VisibilityKm', ' Min VisibilitykM', ' Max Wind SpeedKm/h', ' Mean Wind SpeedKm/h', ' Max Gust SpeedKm/h', 'Precipitationmm', ' CloudCover', ' Events', 'WindDirDegrees<br />']\n--------------------------------------------------\n","output_type":"stream"}],"execution_count":75},{"cell_type":"code","source":"# --- VALUE COUNTS FOR WEATHER EVENTS (correct column name with space) ---\n\n# Loop through each city dataset\nfor city_name, df in datasets.items():\n    print(f\"\\n=== {city_name} Dataset: Event Frequency ===\")\n    \n    # Using the correct column name: ' Events' (note the leading space)\n    # .value_counts() will show how many times each weather event appears\n    # dropna=False ensures missing values are also shown in the count\n    print(df[' Events'].value_counts(dropna=False))\n    \n    # Separator line for clarity\n    print(\"-\" * 50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:35:40.34809Z","iopub.execute_input":"2025-10-22T23:35:40.348436Z","iopub.status.idle":"2025-10-22T23:35:40.359851Z","shell.execute_reply.started":"2025-10-22T23:35:40.348397Z","shell.execute_reply":"2025-10-22T23:35:40.358928Z"}},"outputs":[{"name":"stdout","text":"\n=== Beijing Dataset: Event Frequency ===\n Events\nNaN                      243\nRain                      44\nRain-Thunderstorm         33\nFog                       28\nSnow                       7\nFog-Rain                   5\nFog-Snow                   2\nFog-Rain-Thunderstorm      2\nThunderstorm               1\nName: count, dtype: int64\n--------------------------------------------------\n\n=== Brasilia Dataset: Event Frequency ===\n Events\nNaN                       203\nRain-Thunderstorm          75\nRain                       41\nThunderstorm               30\nFog-Rain-Thunderstorm       6\nFog                         6\nFog-Thunderstorm            2\nFog-Rain                    1\nRain-Hail-Thunderstorm      1\nName: count, dtype: int64\n--------------------------------------------------\n\n=== Cape Town Dataset: Event Frequency ===\n Events\nNaN                  229\nRain                  87\nFog                   38\nFog-Rain               8\nRain-Thunderstorm      2\nRain-Snow              1\nName: count, dtype: int64\n--------------------------------------------------\n\n=== Delhi Dataset: Event Frequency ===\n Events\nNaN                  273\nRain                  51\nThunderstorm          13\nSnow                   8\nRain-Thunderstorm      8\nFog                    5\nRain-Snow              5\nHail-Thunderstorm      1\nFog-Snow               1\nName: count, dtype: int64\n--------------------------------------------------\n\n=== London Dataset: Event Frequency ===\n Events\nRain                          202\nNaN                           114\nFog-Rain                       17\nRain-Thunderstorm              15\nFog                            13\nFog-Rain-Thunderstorm           2\nRain-Snow                       1\nFog-Rain-Snow-Thunderstorm      1\nName: count, dtype: int64\n--------------------------------------------------\n\n=== Moscow Dataset: Event Frequency ===\n Events\nNaN                      149\nSnow                      73\nRain                      70\nFog                       18\nRain-Thunderstorm         16\nRain-Snow                 15\nFog-Rain                   9\nFog-Snow                   6\nThunderstorm               5\nFog-Rain-Snow              3\nFog-Rain-Thunderstorm      1\nName: count, dtype: int64\n--------------------------------------------------\n","output_type":"stream"}],"execution_count":76},{"cell_type":"code","source":"# --- GROUPED ANALYSIS: AVERAGE TEMPERATURE AND HUMIDITY BY EVENT ---\n\n# Loop through each city dataset\nfor city_name, df in datasets.items():\n    print(f\"\\n=== {city_name}: Average Weather by Event ===\")\n    \n    # Group the dataset by the ' Events' column (note leading space)\n    # Then calculate the mean of selected numeric columns for each event type\n    grouped = df.groupby(' Events')[['Mean TemperatureC', ' Mean Humidity']].mean()\n    \n    # Display the grouped mean values\n    print(grouped)\n    \n    # Separator for clarity\n    print(\"-\" * 50)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:36:36.755943Z","iopub.execute_input":"2025-10-22T23:36:36.756276Z","iopub.status.idle":"2025-10-22T23:36:36.782167Z","shell.execute_reply.started":"2025-10-22T23:36:36.756252Z","shell.execute_reply":"2025-10-22T23:36:36.781232Z"}},"outputs":[{"name":"stdout","text":"\n=== Beijing: Average Weather by Event ===\n                       Mean TemperatureC   Mean Humidity\n Events                                                 \nFog                             6.607143       62.178571\nFog-Rain                        7.400000       80.200000\nFog-Rain-Thunderstorm          19.000000       85.500000\nFog-Snow                       -1.500000       61.500000\nRain                           19.750000       61.977273\nRain-Thunderstorm              23.545455       67.030303\nSnow                           -2.000000       58.285714\nThunderstorm                   25.000000       60.000000\n--------------------------------------------------\n\n=== Brasilia: Average Weather by Event ===\n                        Mean TemperatureC   Mean Humidity\n Events                                                  \nFog                             21.500000       68.500000\nFog-Rain                        22.000000       67.000000\nFog-Rain-Thunderstorm           23.666667       75.666667\nFog-Thunderstorm                23.500000       67.500000\nRain                            22.487805       73.439024\nRain-Hail-Thunderstorm          26.000000       66.000000\nRain-Thunderstorm               23.680000       70.253333\nThunderstorm                    23.933333       60.833333\n--------------------------------------------------\n\n=== Cape Town: Average Weather by Event ===\n                   Mean TemperatureC   Mean Humidity\n Events                                             \nFog                        15.815789       74.815789\nFog-Rain                   15.250000       81.250000\nRain                       15.643678       73.471264\nRain-Snow                  14.000000       68.000000\nRain-Thunderstorm          13.000000       73.000000\n--------------------------------------------------\n\n=== Delhi: Average Weather by Event ===\n                   Mean TemperatureC   Mean Humidity\n Events                                             \nFog                        -0.400000       85.800000\nFog-Snow                    0.000000       89.000000\nHail-Thunderstorm          17.000000       59.000000\nRain                       12.627451       61.803922\nRain-Snow                   3.400000       73.000000\nRain-Thunderstorm          20.375000       47.125000\nSnow                       -3.000000       76.375000\nThunderstorm               22.230769       39.923077\n--------------------------------------------------\n\n=== London: Average Weather by Event ===\n                            Mean TemperatureC   Mean Humidity\n Events                                                      \nFog                                 10.461538       77.307692\nFog-Rain                             7.235294       83.470588\nFog-Rain-Snow-Thunderstorm           8.000000       86.000000\nFog-Rain-Thunderstorm               15.500000       76.000000\nRain                                11.430693       76.965347\nRain-Snow                            8.000000       78.000000\nRain-Thunderstorm                   16.400000       73.666667\n--------------------------------------------------\n\n=== Moscow: Average Weather by Event ===\n                       Mean TemperatureC   Mean Humidity\n Events                                                 \nFog                             6.722222       79.611111\nFog-Rain                        6.666667       92.888889\nFog-Rain-Snow                   0.000000       96.666667\nFog-Rain-Thunderstorm          12.000000       72.000000\nFog-Snow                       -5.000000       94.166667\nRain                           11.142857       73.457143\nRain-Snow                      -0.200000       90.266667\nRain-Thunderstorm              18.312500       75.437500\nSnow                           -6.178082       83.287671\nThunderstorm                   21.400000       57.600000\n--------------------------------------------------\n","output_type":"stream"}],"execution_count":77},{"cell_type":"markdown","source":"# ```THE END```","metadata":{}},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import warnings\nwarnings.filterwarnings(\"ignore\", category=RuntimeWarning)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-22T23:19:50.283811Z","iopub.execute_input":"2025-10-22T23:19:50.28474Z","iopub.status.idle":"2025-10-22T23:19:50.30291Z","shell.execute_reply.started":"2025-10-22T23:19:50.284712Z","shell.execute_reply":"2025-10-22T23:19:50.301676Z"}},"outputs":[],"execution_count":71}]}